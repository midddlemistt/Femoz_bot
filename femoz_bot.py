import logging
import requests
import subprocess
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime

API_TOKEN = '7746517875:AAH6fo3wE8IMNcT5NW1BceDdFIi85TsB-c4'
ESP_URL = 'http://192.168.1.100'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ IP ESP8266

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = BackgroundScheduler()
scheduler.start()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–æ–º–∞–Ω–¥
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üí° –†–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Å–≤–µ—â–µ–Ω–∏–µ")],
        [KeyboardButton(text="üñ•Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É")]
    ],
    resize_keyboard=True
)

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command(commands=['start']))
async def start(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# –†–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ –æ—Å–≤–µ—â–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
@router.message(F.text == "üí° –†–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Å–≤–µ—â–µ–Ω–∏–µ")
async def schedule_lighting(message: types.Message):
    scheduler.add_job(turn_on_light, 'cron', hour=18, minute=0)
    scheduler.add_job(turn_off_light, 'cron', hour=6, minute=0)
    await message.answer("–û—Å–≤–µ—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤–∫–ª—é—á–∞—Ç—å—Å—è –≤ 18:00 –∏ –≤—ã–∫–ª—é—á–∞—Ç—å—Å—è –≤ 6:00.")

def turn_on_light():
    requests.get(f"{ESP_URL}/lamp_on")
    print("–õ–∞–º–ø–∞ –≤–∫–ª—é—á–µ–Ω–∞ (–ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é).")

def turn_off_light():
    requests.get(f"{ESP_URL}/lamp_off")
    print("–õ–∞–º–ø–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞ (–ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é).")

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
@router.message(F.text == "üñ•Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É")
async def schedule_program(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`notepad 15:30`")

@router.message(F.text.contains(' '))
async def handle_program_task(message: types.Message):
    try:
        program, time_str = message.text.split()
        run_time = datetime.strptime(time_str, "%H:%M")
        scheduler.add_job(run_program, 'date', run_date=run_time, args=[program])
        await message.answer(f"–ó–∞–¥–∞—á–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã '{program}' –≤ {time_str} –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `notepad 15:30`")

def run_program(program):
    subprocess.Popen(program, shell=True)
    print(f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ '{program}' –∑–∞–ø—É—â–µ–Ω–∞.")

if __name__ == '__main__':
    dp.run_polling(bot)
